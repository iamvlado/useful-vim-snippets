snippet c
const $1 = $2
endsnippet

snippet l
let $1 = $2
endsnippet

snippet i
import $1 from '$2'
endsnippet

snippet in
import { $1 } from '$2'
endsnippet

snippet cr
const $1 = require('$2')
endsnippet

snippet ed
export default $0
endsnippet

snippet :
$1: $2,
endsnippet

snippet ret
return ${0:result}
endsnippet

snippet =>
(${1:args}) => $2
endsnippet

snippet c=>
const ${1:name} = (${2:args}) => $3
endsnippet

# react
snippet ir
import React from 'react'
endsnippet

snippet irc
import React, { ${1:Component}${2:PureComponent} } from 'react'
endsnippet

snippet ipt
import PropTypes from 'prop-types'
endsnippet

snippet isc
import styled from 'styled-components'
endsnippet

snippet is
import s from './index.css'
endsnippet

snippet cwm
componentWillMount() {
	$0
}
endsnippet

snippet cdm
componentDidMount() {
	$0
}
endsnippet

snippet pt
${1}.propTypes = {
	${2}: PropTypes.${3:string}${4:.isRequired},
}
endsnippet

snippet dp
${1:`!v expand('%:t:r')`.}defaultProps = {
	${2}
}
$0
endsnippet

snippet rc
export default class ${1} extends Component {

	render() {
		return (
			$2
		)
	}
}
$0
endsnippet

snippet con
constructor(props${1:, context}) {
	super(props$1)

	this.state = {
		$2
	}
}
$0
endsnippet

snippet met
$1 = ($2) => $3
endsnippet

snippet f "React Pure Function" b
function ${1:`!v expand('%:t:r')`} (${3:{...props}}) {
	return (
		<div>
			$0
		</div>
	)
}
endsnippet

snippet ss
this.setState({
	$1: $2,$0
})
endsnippet

snippet ren
render() {
	return ${1:(
		${2:<div>${3}</div>}
	)}
}
endsnippet

snippet pr
this.props.${1}
endsnippet

snippet st
this.state.${1}
endsnippet

snippet ref
ref={${1:ref} => this.${2:name} = $1}
endsnippet

snippet cn
className="${1}" $0
endsnippet

snippet cns
className={s.${1}} $0
endsnippet

snippet sc
const ${1} = styled.${2:div}\`
	$3
\`

$0
endsnippet

snippet rsc
import styled from 'styled-components'

const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
	$3
\`

export default $1
endsnippet

snippet pp
${props => props.${1}}
endsnippet

snippet cc 
{/* $0 */}
endsnippet

# documentation
snippet /**
/** ${0:why?} */
endsnippet

snippet /**p
/** ${0:why?}
*  @private */
endsnippet

# debug
snippet cl
console.log($0)
endsnippet
