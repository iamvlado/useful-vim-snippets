snippet c
	const ${1} = ${2}
snippet l
	let ${1} = ${2}
snippet i
	import ${1} from '${2}'
snippet in
	import { ${1} } from '${2}'
snippet cr
	const ${1} = require('${2}')
snippet ed
	export default ${1}
snippet :
	${1}: ${2},
snippet ret
	return ${0:result}
snippet =>
	(${1:args}) => ${2}
snippet c=>
	const ${1:name} = (${2:args}) => ${3}
# react
snippet ir
	import React from 'react'
snippet irc
	import React, { ${1:Component}${2:PureComponent} } from 'react'
snippet ipt
	import PropTypes from 'prop-types'
snippet isc
	import styled from 'styled-components'
snippet is
	import s from './index.css'
snippet cwm
	componentWillMount() {
		${1}
	}
snippet cdm
	componentDidMount() {
		${1}
	}
snippet pt
	${1}.propTypes = {
		${2}: PropTypes.${3:string}${4:.isRequired},
	}
snippet dp "Default Props" b
	${1:`!v expand('%:t:r')`.}defaultProps = {
		${2}
	}${0}
endsnippet
snippet rc
	export default class ${1} extends Component {

		render() {
			return (
				${2}
			)
		}
	}
snippet con
	constructor(props${1:, context}) {
		super(props$1)

		this.state = {
			${2}
		}
	}${0}
snippet met
	${1} = (${2}) => ${3}
snippet f "React Function" b
	function ${1:`!v expand('%:t:r')`} (${3:{...props}}) {
		return (
			<div>
				${0}
			</div>
		)
	}
endsnippet
snippet ss
	this.setState({
		${1}: ${2},${0}
	})
snippet ren
	render() {
		return ${1:(
			${2:<div>${3}</div>}
		)}
	}
snippet pr
	this.props.${1}	
snippet st
	this.state.${1}
snippet ref
	ref={${1:ref} => this.${2:name} = $1}
snippet cn
	className="${1}"${0}
snippet cns
	className={s.${1}}${0}
snippet sc
	const ${1} = styled.${2:div}\`
		${3}
	\`
	${0}
snippet rsc "React Styled Component" b
	import styled from 'styled-components'

	const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
		${3}
	\`
	${0}
export default $1
endsnippet
snippet pp
	${props => props.${1}}
snippet cc 
	{/* ${0} */}
# documentation
snippet /**
	/** ${0:why?} */
snippet /**p
	/** ${0:why?}
	 *  @private */
# debug
snippet cl
	console.log(${0})
