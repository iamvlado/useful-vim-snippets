snippet c "const"
const $1 = $2
$0
endsnippet

snippet l "let"
let $1 = $2
$0
endsnippet

snippet i "import" b
import ${1} from '${2}'$0
endsnippet

snippet ii "magic import" b
import `!p
def formatVariableName(path):
  parts = path.split('/')
  module = parts[0]
  if len(parts) > 1:
    return parts[-1]
  else:
    return re.sub(r'[_\-]', '', module.title())
snip.rv = formatVariableName(t[1])
` from '${1}'$0
endsnippet

snippet req "require"
require('{$1}')$0
endsnippet

snippet e "export/export default" b
export ${1:default} ${2:`!v expand('%:t:r')`} $0
endsnippet

snippet edc "export default class" b
export default class ${1:`!v expand('%:t:r')`} extends Component {
	$0
}
endsnippet

snippet cc "create simple class component" b
import React, { Component } from 'react'

export default class ${1:`!v expand('%:t:r')`} extends Component {
	${2:this.state = { $3 }}

	$0
	render() {
		return (
			${4:<div>$5</div>}
		)
	}
}
endsnippet

snippet : "object value"
${1:key}: ${2:value},$0
endsnippet

snippet re "return"
return $0
endsnippet

snippet afb "arrow function body"
(${1:props}) => {
	${2}
}
endsnippet

snippet afe "arrow function expression"
	(${1}) => ${2}
endsnippet

snippet fu "function"
function ${1:`!v expand('%:t:r')`} (${2:props}) {
	return (
		${3}
	)
}
endsnippet

snippet "\.(map|filter|forEach|reduce)" "array method with an arrow function" r
.`!p snip.rv = match.group(1)`(${1:args} => $0
endsnippet

snippet if "if statement"
if (${1:condition}) {
	${2:statement}
}
$0
endsnippet

snippet ife "if/else statement"
	if (${1:condition}) {
		${2:statement}
	}

	else {
		${0:statement}
	}
endsnippet

snippet jp "json parse"
	JSON.parse(${1:obj})
endsnippet

snippet js "json stringify"
	JSON.stringify(${1:obj})

# react
snippet ir "ir" b
import React from 'react'
endsnippet

snippet irc "irc" b
import React, { Component } from 'react'
endsnippet

snippet is "is" b
import s from './index.css'
endsnippet

snippet cwm "component will mount"
componentWillMount() {
	$1
}
endsnippet

snippet cdm "component did mount"
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scup "should component update" b
shouldComponentUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cwup "component will update" b
componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdup "component did update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwu "component will unmount" b
componentWillUnmount() {
	$1
}
endsnippet

snippet ipt "insert props types" b
${1:`!v expand('%:t:r')`.}propTypes = {
	${2}: PropTypes.${3:string}${4:.isRequired},$0
}
endsnippet

snippet pt "PropTypes"
$1: PropTypes.${2:string}${3:.isRequired},$0
endsnippet

snippet pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
	$2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
	$2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet

snippet dp "default props" b
${1:`!v expand('%:t:r')`.}defaultProps = {
	$0
}
endsnippet

snippet con "con"
constructor(props${1:, context}) {
	super(props$1)
	$0
}
endsnippet

snippet ss "ss"
this.setState({$1: $2})$0
endsnippet

snippet ren "render ()"
render() {
	return ${1:(
		${2:<div>${3}</div>}
	)}
}
endsnippet

snippet pr "this.props" i
this.props.${1}
endsnippet

snippet st "this.state" i
this.state.${1}
endsnippet

snippet ref "ref"
ref={${1:ref} => this.${2:name} = $1}
endsnippet

snippet cn "className"
className={s.$0}
endsnippet

snippet sj "<style jsx>" i
<style jsx>{`
	$0
`}</style>
endsnippet

snippet sc "styled component"
const $1 = styled.${2:div}\`
	$3
\`
$0
endsnippet

snippet pp "pp"
${props => props.$0}
endsnippet

# helpers

snippet j "jsx" b
<${1:div}>$0</$1>
endsnippet

snippet /** "/**"
/** ${0:why?} */
endsnippet

snippet /**p "/**p"
/** ${0:why?}
*  @private */
endsnippet

snippet cl "console.log"
console.log('${2:$1: }', ${1})
endsnippet

snippet esld "eslint disable" b
/* eslint-disable */ $0
endsnippet

snippet esle "eslint enable" b
/* eslint-enable */ $0
endsnippet

snippet esll "eslint disable line" i
// eslint-disable-line $0
endsnippet
