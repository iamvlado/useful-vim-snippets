snippet i "import" b
import ${1} from '${2}'$0
endsnippet

snippet req "require"
require('$1')$0
endsnippet

snippet e "export/export default" b
export ${1:default} ${2}$0
endsnippet

snippet : "object value"
${1:key}: ${2:value},$0
endsnippet

snippet ret "return"
return $0
endsnippet

snippet if "if statement"
if (${1:condition}) {
	${2:statement}
}
$0
endsnippet

snippet ife "if/else statement"
if (${1:condition}) {
	${2:statement}
}

else {
	${0:statement}
}
endsnippet

# react

snippet rrcc "React Redux Class Component" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'

class ${1:`!v expand('%:t:r')`} extends Component {
	static propTypes = {
		children: PropTypes.node,
		className: PropTypes.string,
		dispatch: PropTypes.func.isRequired,
	}

	constructor(props) {
		super(props)
	}

	render() {
		return (
			<div className="">
				$3
			</div>
		)
	}
}

const mapStateToProps = state => ({
})

export default connect(mapStateToProps)($1)
endsnippet

snippet ir "ir" b
import React from 'react'
endsnippet

snippet cwm "component will mount"
componentWillMount() {
	$1
}
endsnippet

snippet cdm "component did mount"
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scu "should component update" b
shouldComponentUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdu "component did update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwu "component will unmount" b
componentWillUnmount() {
	$1
}
endsnippet

snippet ipt "insert props types" b
${1:`!v expand('%:t:r')`.}propTypes = {
	${2}: PropTypes.${3:string}${4:.isRequired},$0
}
endsnippet

snippet pt "PropTypes"
$1: PropTypes.${2:string}${3:.isRequired},$0
endsnippet

snippet isr "isRequired" w
isRequired,
endsnippet

snippet dp "default props" b
${1:`!v expand('%:t:r')`.}defaultProps = {
	$0
}
endsnippet

snippet con "con"
constructor(props${1:, context}) {
	super(props$1)
	$0
}
endsnippet

snippet set "set state"
this.setState({$1: $2})$0
endsnippet

snippet pr "this.props" i
this.props.$0
endsnippet

snippet prc "this.props.children" i
this.props.children
endsnippet

snippet st "this.state" i
this.state.$0
endsnippet

snippet cn "className"
className="${1}"$0
endsnippet

# helpers
snippet j "jsx" b
<${1:div}>$2</$1>$0
endsnippet

snippet cl "console.log"
/* eslint-disable */
console.log('${2:$1: }', ${1})$0
/* eslint-enable */
endsnippet

snippet esld "eslint disable" b
/* eslint-disable */ $0
endsnippet

snippet esle "eslint enable" b
/* eslint-enable */ $0
endsnippet

snippet esll "eslint disable line" i
// eslint-disable-line $0
endsnippet
